// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ef2331b7e2
// Version Date: 2020-10-07T23:22:38Z

// Package grpc provides a gRPC client for the Videos service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "mithril/videosvc"
	"mithril/videosvc/videos-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.VideosServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var postvideoEndpoint endpoint.Endpoint
	{
		postvideoEndpoint = grpctransport.NewClient(
			conn,
			"videosvc.Videos",
			"PostVideo",
			EncodeGRPCPostVideoRequest,
			DecodeGRPCPostVideoResponse,
			pb.PostResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listvideoEndpoint endpoint.Endpoint
	{
		listvideoEndpoint = grpctransport.NewClient(
			conn,
			"videosvc.Videos",
			"ListVideo",
			EncodeGRPCListVideoRequest,
			DecodeGRPCListVideoResponse,
			pb.ListResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getvideoEndpoint endpoint.Endpoint
	{
		getvideoEndpoint = grpctransport.NewClient(
			conn,
			"videosvc.Videos",
			"GetVideo",
			EncodeGRPCGetVideoRequest,
			DecodeGRPCGetVideoResponse,
			pb.GetResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		PostVideoEndpoint: postvideoEndpoint,
		ListVideoEndpoint: listvideoEndpoint,
		GetVideoEndpoint:  getvideoEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCPostVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC postvideo reply to a user-domain postvideo response. Primarily useful in a client.
func DecodeGRPCPostVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.PostResponse)
	return reply, nil
}

// DecodeGRPCListVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listvideo reply to a user-domain listvideo response. Primarily useful in a client.
func DecodeGRPCListVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListResponse)
	return reply, nil
}

// DecodeGRPCGetVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getvideo reply to a user-domain getvideo response. Primarily useful in a client.
func DecodeGRPCGetVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCPostVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain postvideo request to a gRPC postvideo request. Primarily useful in a client.
func EncodeGRPCPostVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.PostRequest)
	return req, nil
}

// EncodeGRPCListVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listvideo request to a gRPC listvideo request. Primarily useful in a client.
func EncodeGRPCListVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListRequest)
	return req, nil
}

// EncodeGRPCGetVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getvideo request to a gRPC getvideo request. Primarily useful in a client.
func EncodeGRPCGetVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetVideoRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
