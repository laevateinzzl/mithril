// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ef2331b7e2
// Version Date: 2020-10-07T23:22:38Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "mithril/videosvc"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC VideosServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.VideosServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// videos

		postvideo: grpctransport.NewServer(
			endpoints.PostVideoEndpoint,
			DecodeGRPCPostVideoRequest,
			EncodeGRPCPostVideoResponse,
			serverOptions...,
		),
		listvideo: grpctransport.NewServer(
			endpoints.ListVideoEndpoint,
			DecodeGRPCListVideoRequest,
			EncodeGRPCListVideoResponse,
			serverOptions...,
		),
		getvideo: grpctransport.NewServer(
			endpoints.GetVideoEndpoint,
			DecodeGRPCGetVideoRequest,
			EncodeGRPCGetVideoResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the VideosServer interface
type grpcServer struct {
	postvideo grpctransport.Handler
	listvideo grpctransport.Handler
	getvideo  grpctransport.Handler
}

// Methods for grpcServer to implement VideosServer interface

func (s *grpcServer) PostVideo(ctx context.Context, req *pb.PostRequest) (*pb.PostResponse, error) {
	_, rep, err := s.postvideo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.PostResponse), nil
}

func (s *grpcServer) ListVideo(ctx context.Context, req *pb.ListRequest) (*pb.ListResponse, error) {
	_, rep, err := s.listvideo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListResponse), nil
}

func (s *grpcServer) GetVideo(ctx context.Context, req *pb.GetVideoRequest) (*pb.GetResponse, error) {
	_, rep, err := s.getvideo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetResponse), nil
}

// Server Decode

// DecodeGRPCPostVideoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC postvideo request to a user-domain postvideo request. Primarily useful in a server.
func DecodeGRPCPostVideoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.PostRequest)
	return req, nil
}

// DecodeGRPCListVideoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC listvideo request to a user-domain listvideo request. Primarily useful in a server.
func DecodeGRPCListVideoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListRequest)
	return req, nil
}

// DecodeGRPCGetVideoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getvideo request to a user-domain getvideo request. Primarily useful in a server.
func DecodeGRPCGetVideoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetVideoRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCPostVideoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain postvideo response to a gRPC postvideo reply. Primarily useful in a server.
func EncodeGRPCPostVideoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.PostResponse)
	return resp, nil
}

// EncodeGRPCListVideoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain listvideo response to a gRPC listvideo reply. Primarily useful in a server.
func EncodeGRPCListVideoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListResponse)
	return resp, nil
}

// EncodeGRPCGetVideoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getvideo response to a gRPC getvideo reply. Primarily useful in a server.
func EncodeGRPCGetVideoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
